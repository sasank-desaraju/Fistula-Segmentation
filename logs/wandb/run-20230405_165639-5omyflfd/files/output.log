
{'PROJECT_NAME': 'FistulaSegmentation', 'MODEL_NAME': 'Development', 'RUN_NAME': '2023-04-05-16-56-38', 'WANDB_RUN_GROUP': 'Local', 'FAST_DEV_RUN': True, 'MAX_EPOCHS': 1, 'MAX_STEPS': -1, 'STRATEGY': None, 'DATA_DIR': 'data', 'RANDOM_STATE': 42, 'DATA_NAME': 'BaseSplit', 'USE_TRANSFORMS': False, 'IMAGE_ROOT': '/media/sasank/LinuxStorage/Dropbox (UFL)/FistulaData/Segmentations/', 'IMAGE_SIZE': [512, 512, 96], 'CKPT_FILE': '', 'BATCH_SIZE': 1, 'SHUFFLE': True, 'NUM_WORKERS': 2, 'PIN_MEMORY': False, 'LOAD_FROM_CHECKPOINT': False, 'learning_rate': 0.001}
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
Running in `fast_dev_run` mode: will run the requested loop using 1 batch(es). Logging and checkpointing is suppressed.
Epoch 0:   0%|                                                                                                                                                                                     | 0/2 [00:00<?, ?it/s]
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
  | Name          | Type     | Params
-------------------------------------------
0 | _model        | UNet     | 4.8 M
1 | loss_function | DiceLoss | 0
-------------------------------------------
4.8 M     Trainable params
0         Non-trainable params
4.8 M     Total params
19.236    Total estimated model params size (MB)
The dataloader, train_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 8 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
The number of training batches (1) is smaller than the logging interval Trainer(log_every_n_steps=5). Set a lower value for log_every_n_steps if you want to see logs for the training epoch.
The dataloader, val_dataloader 0, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 8 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
y_pred should be a binarized tensor.
Traceback (most recent call last):
  File "/home/sasank/Documents/GitRepos/Fistula-Segmentation/scripts/fit.py", line 87, in <module>
    main(config, wandb_logger)
  File "/home/sasank/Documents/GitRepos/Fistula-Segmentation/scripts/fit.py", line 51, in main
    trainer.fit(model, data_module)
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/pytorch_lightning/trainer/trainer.py", line 608, in fit
    call._call_and_handle_interrupt(
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/pytorch_lightning/trainer/call.py", line 38, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/pytorch_lightning/trainer/trainer.py", line 650, in _fit_impl
    self._run(model, ckpt_path=self.ckpt_path)
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/pytorch_lightning/trainer/trainer.py", line 1112, in _run
    results = self._run_stage()
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/pytorch_lightning/trainer/trainer.py", line 1191, in _run_stage
    self._run_train()
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/pytorch_lightning/trainer/trainer.py", line 1214, in _run_train
    self.fit_loop.run()
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/pytorch_lightning/loops/loop.py", line 199, in run
    self.advance(*args, **kwargs)
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/pytorch_lightning/loops/fit_loop.py", line 267, in advance
    self._outputs = self.epoch_loop.run(self._data_fetcher)
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/pytorch_lightning/loops/loop.py", line 199, in run
    self.advance(*args, **kwargs)
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/pytorch_lightning/loops/epoch/training_epoch_loop.py", line 213, in advance
    batch_output = self.batch_loop.run(kwargs)
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/pytorch_lightning/loops/loop.py", line 199, in run
    self.advance(*args, **kwargs)
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/pytorch_lightning/loops/batch/training_batch_loop.py", line 88, in advance
    outputs = self.optimizer_loop.run(optimizers, kwargs)
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/pytorch_lightning/loops/loop.py", line 199, in run
    self.advance(*args, **kwargs)
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 202, in advance
    result = self._run_optimization(kwargs, self._optimizers[self.optim_progress.optimizer_position])
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 249, in _run_optimization
    self._optimizer_step(optimizer, opt_idx, kwargs.get("batch_idx", 0), closure)
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 370, in _optimizer_step
    self.trainer._call_lightning_module_hook(
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/pytorch_lightning/trainer/trainer.py", line 1356, in _call_lightning_module_hook
    output = fn(*args, **kwargs)
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/pytorch_lightning/core/module.py", line 1742, in optimizer_step
    optimizer.step(closure=optimizer_closure)
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/pytorch_lightning/core/optimizer.py", line 169, in step
    step_output = self._strategy.optimizer_step(self._optimizer, self._optimizer_idx, closure, **kwargs)
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/pytorch_lightning/strategies/strategy.py", line 234, in optimizer_step
    return self.precision_plugin.optimizer_step(
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 119, in optimizer_step
    return optimizer.step(closure=closure, **kwargs)
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/torch/optim/optimizer.py", line 280, in wrapper
    out = func(*args, **kwargs)
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/torch/optim/optimizer.py", line 33, in _use_grad
    ret = func(self, *args, **kwargs)
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/torch/optim/adam.py", line 121, in step
    loss = closure()
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 105, in _wrap_closure
    closure_result = closure()
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 149, in __call__
    self._result = self.closure(*args, **kwargs)
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 135, in closure
    step_output = self._step_fn()
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 419, in _training_step
    training_step_output = self.trainer._call_strategy_hook("training_step", *kwargs.values())
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/pytorch_lightning/trainer/trainer.py", line 1494, in _call_strategy_hook
    output = fn(*args, **kwargs)
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/pytorch_lightning/strategies/strategy.py", line 378, in training_step
    return self.model.training_step(*args, **kwargs)
  File "/home/sasank/Documents/GitRepos/Fistula-Segmentation/scripts/net.py", line 197, in training_step
    dice_score = self.dice_metric(y_pred=preds, y=labels)
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/monai/metrics/metric.py", line 330, in __call__
    ret = super().__call__(y_pred=y_pred, y=y)
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/monai/metrics/metric.py", line 71, in __call__
    return self._compute_tensor(y_pred.detach(), y_)
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/monai/metrics/meandice.py", line 83, in _compute_tensor
    return compute_dice(
  File "/home/sasank/miniconda3/envs/jtml/lib/python3.10/site-packages/monai/metrics/meandice.py", line 138, in compute_dice
    raise ValueError(f"y_pred and y should have same shapes, got {y_pred.shape} and {y.shape}.")
ValueError: y_pred and y should have same shapes, got torch.Size([1, 2, 96, 512, 512]) and torch.Size([1, 1, 96, 512, 512]).